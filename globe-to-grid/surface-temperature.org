#+title: Surface Temperatures
#+author: J. Dylan White
#+PROPERTY: header-args:python :session *py* :tangle "./sfc_temperature.py" :mkdirp yes

* Tasks

** TODO Tie data to table
** TODO Add past 12 months table
** TODO Make functions to read data and create tables
** TODO Make functions to identify country/city data
** TODO Plot results

* Introduction

Now that we have a grid set up for the globe with cities and countries tied to the grid, let's also tie some meteorological data to that grid. This data will also be on a grid, allowing us to later do queries to answer questions like "what are the annual temperatures in Berlin, Germany?".

The [[https://psl.noaa.gov/data/reanalysis/reanalysis.shtml][NCEP/NCAR Reanalysis]] dataset has globally modelled meteorological quantities such as temperature, wind speeds, and pressure. For now, we'll look at the monthly means of surface temperatures. The link to the this data can be found [[https://downloads.psl.noaa.gov/Datasets/ncep.reanalysis.derived/surface/air.mon.mean.nc][here]]. We'll tie this data to our grid and have a look at some things using Python.

* Importing Modules

We'll need to use =xarray= in order to read in the netCDF files from NCEP/NCAR.

#+begin_src python :results silent

  import xarray
  import pandas as pd

#+end_src

* Read the Data

Now we'll use =xarray= to read the data that I've downloaded. We can return the =xarray= Dataset object to see a nice summary of the data.

#+begin_src python :tangle no :results value

  # Set the file path of the downloaded dataset
  filePath = "./data/meteorological/air.mon.mean.nc"

  # Open the dataset with xarray
  ds = xarray.open_dataset(filePath)

  # Return summary of the data
  ds

#+end_src

#+RESULTS:
#+begin_example
<xarray.Dataset>
Dimensions:  (lat: 73, lon: 144, time: 899)
Coordinates:
  ,* lat      (lat) float32 90.0 87.5 85.0 82.5 80.0 ... -82.5 -85.0 -87.5 -90.0
  ,* lon      (lon) float32 0.0 2.5 5.0 7.5 10.0 ... 350.0 352.5 355.0 357.5
  ,* time     (time) datetime64[ns] 1948-01-01 1948-02-01 ... 2022-11-01
Data variables:
    air      (time, lat, lon) float32 ...
Attributes:
    description:    Data from NCEP initialized reanalysis (4x/day).  These ar...
    platform:       Model
    Conventions:    COARDS
    NCO:            20121012
    history:        Thu May  4 20:11:16 2000: ncrcat -d time,0,623 /Datasets/...
    title:          monthly mean air.sig995 from the NCEP Reanalysis
    dataset_title:  NCEP-NCAR Reanalysis 1
    References:     http://www.psl.noaa.gov/data/gridded/data.ncep.reanalysis...
#+end_example

The data is stored in a variable =air= with dimensions =lat=, =lon=, and =time=. The spatial grid has a grid spacing of 2.5 degrees latitude and longitude. The time dimension is monthly and goes back to 1948.

* Read the Last Year's Data

Let's flip the longitude coordinates from 0:360 to -180:180, and limit the time dimension to just the last year. We'll give the option =nYears= in our function to return a specified number of years, rather than the default one year. 

#+begin_src python :results silent


  def last_year_data(filePath,nYear=1):
      """Read dataset, adjust coordinates, and select last 12 months of data.

      filePath is the location fo the netCDF file.
      This assumes dimensions are lon, lat, and time."""

      # Open the dataset with xarray
      ds = xarray.open_dataset(filePath)

      # Convert the longitude from 0 to 360 degrees to -180 to 180
      ds.coords['lon'] = (ds.coords['lon'] + 180) % 360 - 180

      # Sort by longitudes to rearrage
      ds = ds.sortby(ds.lon)

      # Subset the time dimension to the last 10 years, or 120 months
      ds = ds.sel(time=ds['time'][-12*nYear:])

      return ds

  
#+end_src

Let's have a look at the results of running this function on our netCDF file.

#+begin_src python :tangle no :results value

  last_year_data(filePath)

#+end_src

#+RESULTS:
#+begin_example
<xarray.Dataset>
Dimensions:  (lat: 73, lon: 144, time: 12)
Coordinates:
  ,* lat      (lat) float32 90.0 87.5 85.0 82.5 80.0 ... -82.5 -85.0 -87.5 -90.0
  ,* lon      (lon) float32 -180.0 -177.5 -175.0 -172.5 ... 172.5 175.0 177.5
  ,* time     (time) datetime64[ns] 2021-12-01 2022-01-01 ... 2022-11-01
Data variables:
    air      (time, lat, lon) float32 ...
Attributes:
    description:    Data from NCEP initialized reanalysis (4x/day).  These ar...
    platform:       Model
    Conventions:    COARDS
    NCO:            20121012
    history:        Thu May  4 20:11:16 2000: ncrcat -d time,0,623 /Datasets/...
    title:          monthly mean air.sig995 from the NCEP Reanalysis
    dataset_title:  NCEP-NCAR Reanalysis 1
    References:     http://www.psl.noaa.gov/data/gridded/data.ncep.reanalysis...
#+end_example

As expected, our longitudes are flipped and the time dimension is sliced to just the last 12 months.

* Calculate Monthy Means and Standard Deviations

Now let's say we want to know what the average temperatures are in a grid in January for the last 10 years, February for the last 10 years, and so on. We can use =Dataset.groupby= and then aggregate those groups using =.mean()= and =.std()= to get the mean and standard deviation. Specifically, we'll group by =time.month= and make sure our mean and standard deviations are being calculated along the time dimension for each group.

#+begin_src python :results silent


  def monthly_means(filePath,varName,nYears=10):

      """Read dataset, adjust coordinates, and return monthly means/stddevs

      filePath is the path to the netCDF file.
      nYears is the number of years used to aggregate each monthly average.
      Assumes dimensions are lon, lat, time."""

      # Open the dataset with xarray
      ds = xarray.open_dataset(filePath)

      # Convert the longitude from 0 to 360 degrees to -180 to 180
      ds.coords['lon'] = (ds.coords['lon'] + 180) % 360 - 180

      # Sort by longitudes to rearrage
      ds = ds.sortby(ds.lon)

      # Subset the time dimension to the last nYears, or nYears*12 months
      ds = ds.sel(time=ds['time'][-12*nYears:])

      # Now groupby and aggregate the months by averaging
      # and getting the standard deviation
      dsMonthlyAgg = ds.groupby('time.month').mean('time')
      dsMonthlyAgg = dsMonthlyAgg.rename({varName:varName+'_avg'})
      dsMonthlyAgg[varName+'_std'] = ds[varName].groupby('time.month').std('time')

      return dsMonthlyAgg

  
#+end_src

#+begin_src python :tangle no :results value

  monthly_means(filePath,'air',10)
  
#+end_src

#+RESULTS:
#+begin_example
<xarray.Dataset>
Dimensions:  (lat: 73, lon: 144, month: 12)
Coordinates:
  ,* lat      (lat) float32 90.0 87.5 85.0 82.5 80.0 ... -82.5 -85.0 -87.5 -90.0
  ,* lon      (lon) float32 -180.0 -177.5 -175.0 -172.5 ... 172.5 175.0 177.5
  ,* month    (month) int64 1 2 3 4 5 6 7 8 9 10 11 12
Data variables:
    air_avg  (month, lat, lon) float32 -25.62 -25.62 -25.62 ... -22.44 -22.44
    air_std  (month, lat, lon) float32 3.277 3.277 3.277 ... 1.008 1.008 1.008
Attributes:
    description:    Data from NCEP initialized reanalysis (4x/day).  These ar...
    platform:       Model
    Conventions:    COARDS
    NCO:            20121012
    history:        Thu May  4 20:11:16 2000: ncrcat -d time,0,623 /Datasets/...
    title:          monthly mean air.sig995 from the NCEP Reanalysis
    dataset_title:  NCEP-NCAR Reanalysis 1
    References:     http://www.psl.noaa.gov/data/gridded/data.ncep.reanalysis...
#+end_example

* Join Temperature Data to the Grid Table 

Now all that's left is to tie this dataset to our grid. Once we join these tables, we can then start to explore the data we've created.
