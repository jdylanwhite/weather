#+title: Globe To Grid Conversion
#+author: J. Dylan White
#+PROPERTY: header-args:python :session *py* :mkdirp yes

* Tasks

** TODO Fix prime meridian problem
There are currently two rectangles, split on either side of the meridian. This is fine, but we want to make sure that points that fall in either side get treated the same way. I think giving them the same index value would work.

* Introduction

The overall goal of this project, at least initially, is to provide climatological weather data across the globe in one coherent, consistent manner. Services like this already exist to some extent, but my goal here is to create something that is

  1. customizable as interests and utility for the project grow,
  2. consistent for the whole globe, not just certain regions, and
  3. offers more information for my own personal needs.

Personally, my main utility for the project is to assess what type of weather I may expect for traveling or moving abroad. For example, if I decide I want to move to Spain, how are the summers and winters there? Or, I've heard the weather is great year-round in places like California, where else has similar weather?

Many weather datasets are available on a *grid* of latitudes and longitudes, so we'll be able to say things like "the annual average temperature between 35 and 40 degrees North and 75 and 80 degrees West is 60 degrees F". For the purpose of this project however, it may be more useful to say something like "the annual of the state of Virginia is 60 degrees F". Of course, geopolitical boundaries are not confined to rigid grids, so we'll need to come up with a way to map the grid to countries and major cities. This is the purpose of this part of the project. Since weather datasets are delivered with different grid sizes, the objective here is to develop a way to take any specified grid and return the countries or cities that fall within a particular grid cell. We'll do this using Python.

* Input Data

ESRI has data available for both [[https://hub.arcgis.com/datasets/esri::world-countries-generalized/about][World Countries]] and [[https://hub.arcgis.com/datasets/esri::world-cities/about][World Cities]]. We'll download the shapefiles for both of these datasets. We'll ultimately need to make functions to map back and forth between the grid, the cities, and the countries.

The other input for our functions here is the grid of latitudes and longitudes. We want this to take any grid from the weather data, so we'll build it to simply take two arrays (the latitudes and longitudes), and then contruct a database of cities and contries that fall within each grid cell.

* Importing Modules

We will need =geopandas= for reading the shapefiles that we have downloaded, =pandas= for managing non-geospatial dataframes, =numpy= to build the array, and =shapely= to handle geospatial geometries.

#+begin_src python :tangle "./grid.py" :results silent

  # Import modules
  import geopandas as gpd
  import pandas as pd
  import numpy as np
  from shapely.geometry import Point, Polygon

#+end_src

* Inspecting the Shapefiles

Using Python, let's first inspect the shapefiles for the country and cities.

** Read in the Shapfiles

Reading in the shapefiles is pretty straightforward with geopandas using the =read_file()= function. We'll also trim out some of the unnecessary additional information from the original dataset. We only need names of places and their coordinates for now.

Start by reading the in the cities shapefile which I have stored in =./data/shapefiles/World_Cities.shp=.

#+begin_src python :tangle "./grid.py" :results silent

  def read_cities_shp(shpdir="./data/shapefiles/"):

      """
      Read the shapefile for cities, and only keep certain columns.
      """

      # Read the cities shapefile
      gdfCities = gpd.read_file(shpdir+"World_Cities.shp")

      # Limit the columns to what we need
      keepColumns = ["CITY_NAME","CNTRY_NAME","geometry"]
      gdfCities = gdfCities.loc[:,keepColumns]

      return gdfCities

#+end_src

Now let's see how the data looks.

#+begin_src python :results value

  # Read the cities shapefile
  gdfCities = read_cities_shp()
  gdfCities.head()

#+end_src

#+RESULTS:
:               CITY_NAME CNTRY_NAME                     geometry
: 0                Cuiaba     Brazil  POINT (-56.09300 -15.61500)
: 1              Brasilia     Brazil  POINT (-47.89775 -15.79211)
: 2               Goiania     Brazil  POINT (-49.25500 -16.72700)
: 3          Campo Grande     Brazil  POINT (-54.61600 -20.45100)
: 4  Pedro Juan Caballero   Paraguay  POINT (-55.74800 -22.53300)

Now we'll read in the countries shapefile which I have stored in =./data/shapefiles/World_Countries__Generalized_.shp.=

#+begin_src python :tangle "./grid.py" :results silent

  def read_countries_shp(shpdir="./data/shapefiles/"):

      """
      Read the shapefile for countries, and only keep certain columns.
      """

      # Read the countries shapefile
      gdfCountries = gpd.read_file(shpdir+"World_Countries__Generalized_.shp")

      # Limit the columns to what we need
      keepColumns = ["COUNTRY","geometry"]
      gdfCountries = gdfCountries.loc[:,keepColumns]

      return gdfCountries

#+end_src

Let's also have a look at the countries data

#+begin_src python :results value

  # Read the cities shapefile
  gdfCountries = read_countries_shp()
  gdfCountries.head()

#+end_src

#+RESULTS:
:           COUNTRY                                           geometry
: 0     Afghanistan  POLYGON ((61.27655 35.60725, 61.29638 35.62854...
: 1         Albania  POLYGON ((19.57083 41.68527, 19.58195 41.69569...
: 2         Algeria  POLYGON ((4.60335 36.88791, 4.63555 36.88638, ...
: 3  American Samoa  POLYGON ((-170.74390 -14.37555, -170.74942 -14...
: 4         Andorra  POLYGON ((1.44584 42.60194, 1.48653 42.65042, ...

* Construct a Grid

Now we need to create arrays for our grid, spanning from -90 to 90 degrees latitude and from -180 to 180 degrees longitude, by some defined =gridspacing=.

#+begin_src python :tangle "./grid.py" :results silent 

  def construct_grid_arrays(gridspacing=2.5,addOffset=True):

      """
      Build an evenly spaced latitude and longitude array.

      gridspacing is a float indicating the spacing in degrees
      """

      # Build the latitude and longitude array, but avoid the poles
      latitude = np.arange(-90+gridspacing,90,gridspacing)
      longitude = np.arange(-180,180+gridspacing,gridspacing)

      return longitude, latitude

#+end_src

Now with the arrays, we can create a grid of polygon tiles, and send them to a shapefile. We'll need to use =shapely.geoemetry.Polygon= objects to turn these lists of coordinates into actual geometry features for our shapefile.

#+begin_src python :tangle "./grid.py" :results silent


  def construct_grid(shpdir="./data/shapefiles/",gridspacing=2.5):

      """
      Create the grid as a series of square tiles, then write the
      results to a shapefile
      """

      # Calculate half grid spacing
      halfGrid = gridspacing*0.5

      # Construct the lat/lon arrays
      longitude, latitude = construct_grid_arrays(gridspacing)

      # Initialize empty list to store row values
      rowList = []

      # Create each grid cell as a polygon
      for lat in latitude:
          for lon in longitude:

              # Calculate the corner coordinates
              latS = lat-halfGrid
              latN = lat+halfGrid
              lonW = lon-halfGrid
              lonE = lon+halfGrid

              # Check periodic east/west conditions
              if lonW < -180:
                  lonW = -180
              if lonE > 180:
                  lonE = 180

              # Build the polygon
              polygon = Polygon([(lonW, latS), (lonW, latN),
                                 (lonE, latN), (lonE, latS)])
              rowList.append([polygon,lon,lat])

      # Create the grid geodataframe
      gdfGrid = gpd.GeoDataFrame(rowList,
                                 columns=['geometry','centerLon','centerLat'],
                                 geometry='geometry',
                                 crs='EPSG:4326')

      # Send the grid to shapefile
      gdfGrid.to_file(shpdir+"grid_"+str(gridspacing)+".shp")

      return gdfGrid

#+end_src

Let's see how our grid dataframe looks.

#+begin_src python :results value

  gdfGrid = construct_grid()
  gdfGrid.head()

#+end_src

#+RESULTS:
:                                             geometry  centerLon  centerLat
: 0  POLYGON ((-180.00000 -88.75000, -180.00000 -86...     -180.0      -87.5
: 1  POLYGON ((-178.75000 -88.75000, -178.75000 -86...     -177.5      -87.5
: 2  POLYGON ((-176.25000 -88.75000, -176.25000 -86...     -175.0      -87.5
: 3  POLYGON ((-173.75000 -88.75000, -173.75000 -86...     -172.5      -87.5
: 4  POLYGON ((-171.25000 -88.75000, -171.25000 -86...     -170.0      -87.5

* Find Intersecting Countries and Cities in the Grid

With our geodataframes now, we can figure out which countries and cities fall within each grid cell. We can do this with a spatial join via =gpd.sjoin=.

#+begin_src python :tangle "./grid.py" :results silent

  def grid_country_sjoin(idDir="./data/ids/"):

      """
      Use a spatial join to find indices for overlapping grids and countries.
      """

      # Perform spatial join
      gdfIntersectsCountries = gpd.sjoin(gdfGrid,gdfCountries,how="left")

      # Drop NA values, and only keep the index column
      dfIntersectsCountries = gdfIntersectsCountries.dropna()['index_right']

      # Rename column
      dfIntersectsCountries = pd.DataFrame({"country_id":dfIntersectsCountries})

      # Send output to CSV
      dfIntersectsCountries.to_csv(idDir+'grid_country_sjoin.csv',index_label="grid_id")

      return dfIntersectsCountries

  def grid_city_sjoin(idDir="./data/ids/"):

      """
      Use a spatial join to find indices for overlapping grids and cities.
      """

      # Perform spatial join
      gdfIntersectsCities = gpd.sjoin(gdfGrid,gdfCities,how="left")

      # Drop NA values, and only keep the index column
      dfIntersectsCities = gdfIntersectsCities.dropna()['index_right']

      # Rename column
      dfIntersectsCities = pd.DataFrame({"city_id":dfIntersectsCities})

      # Send output to CSV
      dfIntersectsCities.to_csv(idDir+'grid_city_sjoin.csv',index_label="grid_id")

      return dfIntersectsCities

#+end_src

Let's take a look at our joined tables for countries.

#+begin_src python :results value

  dfIntersectionCountries = grid_country_sjoin()
  dfIntersectionCountries.head()
  
#+end_src

#+RESULTS:
:    country_id
: 0         7.0
: 1         7.0
: 2         7.0
: 3         7.0
: 4         7.0

And also for our cities.

#+begin_src python :results value

  dfIntersectionCities = grid_city_sjoin()
  dfIntersectionCities.head()
  
#+end_src

#+RESULTS:
:       city_id
: 1930     28.0
: 2074     27.0
: 2074     25.0
: 2079     26.0
: 2459   2538.0

* Map IDs to Grid

Now that we know the IDs for which country/city falls within a grid, let's set up some functions to map the IDs to the actual grids, countries, or cities.

#+begin_src python :tangle "./grid.py" :results silent

  def find_country_id_grids(countryId,idPath="./data/ids/grid_country_sjoin.csv"):

      """
      Look up which grids contain a specified country index and return them as a list.
      """

      # Read the spatial join CSV
      df = pd.read_csv(idPath)

      # Find the grid IDs for a given country
      gridList = df.loc[df["country_id"]==countryId]['grid_id'].to_list()

      return gridList

  def find_city_id_grids(cityId,idPath="./data/ids/grid_city_sjoin.csv"):

      """
      Look up which grids contain a specified city index and return them as a list
      """

      # Read the spatial join CSV
      df = pd.read_csv(idPath)

      # Find the grid IDs for a given country
      gridList = df.loc[df["city_id"]==cityId]['grid_id'].to_list()

      return gridList

#+end_src

Now let's test out our functions for Ireland and Dublin, as an example. Ireland is index 108 in the countries shapefile, and Dublin is index 1606 in the cities shapefile.

#+begin_src python :results output

  irelandGridList = find_country_id_grids(108)
  print("Ireland is contained in the following grids:\n"+str(irelandGridList))
  print("The coordinates of those grids are:")
  for coord in gdfGrid.iloc[irelandGridList,:]['geometry'].astype(str).to_list():
      print("\t"+coord)

  dublinGridList = find_city_id_grids(1606)
  print("\nDublin is contained in the following grids:\n"+str(dublinGridList))
  print("The coordinates of those grids are:")
  for coord in gdfGrid.iloc[dublinGridList,:]['geometry'].astype(str).to_list():
      print("\t"+coord)

#+end_src

#+RESULTS:
#+begin_example
Ireland is contained in the following grids:
[8188, 8189, 8190, 8333, 8334, 8335]
The coordinates of those grids are:
	POLYGON ((-11.25 51.25, -11.25 53.75, -8.75 53.75, -8.75 51.25, -11.25 51.25))
	POLYGON ((-8.75 51.25, -8.75 53.75, -6.25 53.75, -6.25 51.25, -8.75 51.25))
	POLYGON ((-6.25 51.25, -6.25 53.75, -3.75 53.75, -3.75 51.25, -6.25 51.25))
	POLYGON ((-11.25 53.75, -11.25 56.25, -8.75 56.25, -8.75 53.75, -11.25 53.75))
	POLYGON ((-8.75 53.75, -8.75 56.25, -6.25 56.25, -6.25 53.75, -8.75 53.75))
	POLYGON ((-6.25 53.75, -6.25 56.25, -3.75 56.25, -3.75 53.75, -6.25 53.75))

Dublin is contained in the following grids:
[8189]
The coordinates of those grids are:
	POLYGON ((-8.75 51.25, -8.75 53.75, -6.25 53.75, -6.25 51.25, -8.75 51.25))
#+end_example

* Map Country and City Names to Grid

That's great, but it would be better if we didn't have to look up the index of the city or country in order to do this, but could instead pass the city or country name. Let's make a simple function that looks up the city or country index by name and then runs the functions above.

#+begin_src python :tangle "./grid.py" :results silent

  def find_country_name_grids(country,
                              shpDir="./data/shapefiles/",
                              idPath="./data/ids/grid_country_sjoin.csv"):

      """
      Look up which grids contain a specified country and return them as a list.
      """

      # Read the countries shapefile
      gdfCountries = read_countries_shp(shpDir)

      # Get the ID of the given country
      countryId = gdfCountries.index[gdfCountries['COUNTRY'] == country].tolist()[0]

      # Find the country grid cells by ID
      countryGridList = find_country_id_grids(countryId)

      return countryGridList

  def find_city_name_grids(city,country,
                           shpDir="./data/shapefiles/",
                           idPath="./data/ids/grid_city_sjoin.csv"):
      
      """
      Look up which grids contain a specified city and country and return them as a list.
      """

      # Read the countries shapefile
      gdfCities = read_cities_shp(shpDir)

      # Get the ID of the given country
      cityId = gdfCities.index[(gdfCities["CITY_NAME"] == city) & (gdfCities['CNTRY_NAME'] == country)]
      cityId = cityId.tolist()[0]

      # Find the country grid cells by ID
      cityGridList = find_city_id_grids(cityId)

      return cityGridList

#+end_src

Now let's test it out on the same country and city, Ireland and Dublin, as before to make sure we have the correct results.

#+RESULTS:
#+begin_src python :results output
  
  irelandGridList = find_country_name_grids("Ireland")
  print("Ireland is contained in the following grids:\n"+str(irelandGridList))
  print("The coordinates of those grids are:")
  for coord in gdfGrid.iloc[irelandGridList,:]['geometry'].astype(str).to_list():
      print("\t"+coord)

  dublinGridList = find_city_name_grids("Dublin","Ireland")
  print("\nDublin is contained in the following grids:\n"+str(dublinGridList))
  print("The coordinates of those grids are:")
  for coord in gdfGrid.iloc[dublinGridList,:]['geometry'].astype(str).to_list():
      print("\t"+coord)

#+end_src

#+RESULTS:
#+begin_example
Ireland is contained in the following grids:
[8188, 8189, 8190, 8333, 8334, 8335]
The coordinates of those grids are:
	POLYGON ((-11.25 51.25, -11.25 53.75, -8.75 53.75, -8.75 51.25, -11.25 51.25))
	POLYGON ((-8.75 51.25, -8.75 53.75, -6.25 53.75, -6.25 51.25, -8.75 51.25))
	POLYGON ((-6.25 51.25, -6.25 53.75, -3.75 53.75, -3.75 51.25, -6.25 51.25))
	POLYGON ((-11.25 53.75, -11.25 56.25, -8.75 56.25, -8.75 53.75, -11.25 53.75))
	POLYGON ((-8.75 53.75, -8.75 56.25, -6.25 56.25, -6.25 53.75, -8.75 53.75))
	POLYGON ((-6.25 53.75, -6.25 56.25, -3.75 56.25, -3.75 53.75, -6.25 53.75))

Dublin is contained in the following grids:
[8189]
The coordinates of those grids are:
	POLYGON ((-8.75 51.25, -8.75 53.75, -6.25 53.75, -6.25 51.25, -8.75 51.25))
#+end_example

* Find any Coordinate's Grid ID

Now let's make a function to identify which grid cell any given point falls within.

#+begin_src python :tangle "./grid.py" :results silent

  def find_point_grids(lon,lat,shpdir="./data/shapefiles/",gridspacing=2.5):

      """
      Look up which grid cell contains a specified latitude and longitude.
      """

      # Read the grid shapefile
      gridPath = shpdir+"grid_"+str(gridspacing)+".shp"
      gdfGrid = gpd.read_file(gridPath)

      # Create point geometry
      point = Point(lon,lat)
      gdfPoint = gpd.GeoDataFrame({"geometry":[point]})

      # Get the point grid intersection
      gdfIntersection = gpd.sjoin(gdfGrid,gdfPoint,how="right")

      # Find the grid that matches the intersection
      gridId = gdfIntersection["index_left"].to_list()[0]

      return gridId

#+end_src

And again, we'll test it out on the coordinates of Dublin, Ireland, to make sure the results are consistent.

#+begin_src python :results output

  lon = -6.25735
  lat = 53.34156 
  gridId = find_point_grids(lon,lat)
  print("The point",lon,"E",lat,"N is located in grid",gridId) 

#+end_src

#+RESULTS:
: The point -6.25735 E 53.34156 N is located in grid 8277

