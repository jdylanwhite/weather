#+Title: Lag Regression of SOI Data onto OLR Data
#+Date: <2024-06-06 Thu>

* Introduction

Now that we've [[file:soi_olr_regression.org][regressed the southern oscillation index onto outgoing longwave radiation data]], let's also perform some lagged regressions. We'll do the same as before, but we'll regress the OLR data to the SOI with an offset in time. By doing this across multiple offsets, we can build a timeseries of regressed OLR data to see a typical life-cycle of anomalous OLR associated with ENSO.

* Import Modules

Start by importing everything we'll need to run the code.

#+begin_src python :session *py* :results silent

  # Import modules
  from sklearn.linear_model import LinearRegression
  import xarray
  import datetime
  import pandas as pd
  import numpy as np
  import matplotlib.pyplot as plt
  import cartopy.crs as ccrs
  from cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter
  from mpl_toolkits.axes_grid1 import make_axes_locatable
  from cartopy.util import add_cyclic_point
  from PIL import Image

#+end_src

* Read the Data

Here we open the data in the same way as before to prepare it for the regressions.

#+begin_src python :session *py* :results value

  # Set date bounds to slice the data
  begin_date = datetime.datetime(1980,1,1,15)
  end_date = datetime.datetime(2024,1,1,15)

  # Read OLR dataset
  file_path = "../olr/data/olr-monthly_v02r07_197901_202404.nc"

  # Open the dataset with xarray
  ds = xarray.open_dataset(file_path)

  # Slice the data to only be within a specified date range 
  olr_slice_da = ds['olr'].sel(time=slice(begin_date,end_date))

  # Get the SOI data between within the same date range
  soi_df = pd.read_csv("./data/soi.csv")
  soi_df['Date'] = pd.to_datetime(soi_df['Date'])
  soi_slice_df = soi_df.loc[
      (soi_df['Date']>=begin_date) & (soi_df['Date']<end_date)
  ]

  # Reshape arrays
  soi_array = soi_slice_df['SOI'].to_numpy().reshape(-1,1)
  olr_array = olr_slice_da.to_numpy().reshape(528,72*144)
  
#+end_src  

* Get Regression Coeffecients for Different Lagged Timeseries
        
#+begin_src python
  
  # Create linear regression object
  regr = LinearRegression()

  # Set the number of months on either end to perform the lag
  max_lag_timesteps = 36
  lag_time_dimension = np.arange(-max_lag_timesteps,max_lag_timesteps+1,1)
  num_timesteps = len(soi_slice_df)

  # Loop through and get regression coefficients
  reg_coeffs_da_list = []
  for i, lag_time in enumerate(lag_time_dimension):

      # Get the array indices to shift the time series
      start_index = i
      end_index = num_timesteps - max_lag_timesteps*2 + i
      
      # Train the model using the training sets
      x = regr.fit(
          soi_array[max_lag_timesteps:-max_lag_timesteps],
          olr_array[start_index:end_index,:]
      )

      # Reshape the regression coefficients
      reg_coeffs = x.coef_.reshape(72,144)
      
      # Write data as a data array
      reg_coeffs_da = xarray.DataArray(
          reg_coeffs, 
          coords={'lat': olr_slice_da['lat'],'lon': olr_slice_da['lon']}, 
          dims=["lat", "lon"]
      )
      reg_coeffs_da_list.append(reg_coeffs_da)

  # Concatenate data array list
  reg_coeffs_da = xarray.concat(
      reg_coeffs_da_list,
      pd.Index(lag_time_dimension,name="lag_months")
  )
  reg_coeffs_da.attrs["units"] = "W m-2"
  reg_coeffs_da

#+end_src

#+RESULTS:
#+begin_example
<xarray.DataArray (lag_months: 73, lat: 72, lon: 144)> Size: 6MB
array([[[ 0.36250959,  0.37777384,  0.35317359, ...,  0.3467297 ,
          0.3496617 ,  0.36517072],
        [ 0.49499369,  0.47371583,  0.47758065, ...,  0.48310562,
          0.47683957,  0.46937287],
        [ 0.53531971,  0.53462203,  0.5323323 , ...,  0.51595556,
          0.53191031,  0.52085722],
        ...,
        [-0.6358389 , -0.64039335, -0.64379866, ..., -0.61003417,
         -0.60132907, -0.61466847],
        [-0.52676902, -0.52382407, -0.52513598, ..., -0.5305458 ,
         -0.54788865, -0.49866034],
        [-0.44902283, -0.43481425, -0.4225047 , ..., -0.45226812,
         -0.43596928, -0.41648759]],

       [[ 0.72739989,  0.75815594,  0.72550533, ...,  0.73992155,
          0.70545879,  0.76287707],
        [ 0.81157987,  0.78661998,  0.81231365, ...,  0.79663721,
          0.79094426,  0.78038541],
        [ 0.82210507,  0.82687358,  0.84153179, ...,  0.78448477,
          0.80780812,  0.80459058],
...
        [ 0.05470641,  0.05877028,  0.06200361, ...,  0.04064412,
          0.03585749,  0.05378244],
        [ 0.14923847,  0.10878926,  0.09813894, ...,  0.11058439,
          0.09160171,  0.08641041],
        [ 0.14837459,  0.10968925,  0.1836513 , ...,  0.16013691,
          0.12770237,  0.17169384]],

       [[ 0.77979048,  0.78858058,  0.77593847, ...,  0.77449606,
          0.74663607,  0.75436362],
        [ 0.82624402,  0.84157397,  0.86255164, ...,  0.80798575,
          0.82609783,  0.83777338],
        [ 0.83721963,  0.85449833,  0.87065958, ...,  0.80593763,
          0.8033982 ,  0.83048742],
        ...,
        [-0.18794886, -0.18143232, -0.19389867, ..., -0.18970942,
         -0.1950107 , -0.18954948],
        [-0.03541965, -0.04966373, -0.0535767 , ..., -0.03349832,
         -0.04750451, -0.04446984],
        [ 0.02349952, -0.01877678,  0.03565797, ...,  0.02664942,
          0.03008829,  0.03559511]]])
Coordinates:
  ,* lat         (lat) float32 288B -88.75 -86.25 -83.75 ... 83.75 86.25 88.75
  ,* lon         (lon) float32 576B 1.25 3.75 6.25 8.75 ... 353.8 356.2 358.8
  ,* lag_months  (lag_months) int64 584B -36 -35 -34 -33 -32 ... 32 33 34 35 36
Attributes:
    units:    W m-2
#+end_example

* Plot Regression Coefficients

#+begin_src python :session *py* :results output file

  image_list = []
  for i, lag_time in enumerate(lag_time_dimension):

        # Intialize the figure
        fig = plt.figure(figsize=(11,8.5))

        # Set up axes using a specified projection
        ax = plt.axes(projection=ccrs.PlateCarree(central_longitude=180))

        # Add cyclic point to data
        data = reg_coeffs_da.sel(lag_months=lag_time)
        data, lon = add_cyclic_point(data,coord=reg_coeffs_da['lon'])

        # Make a filled contour plot
        contour_levels = np.linspace(-10,10,21)
        contour = ax.contourf(lon,reg_coeffs_da['lat'],data,
                              transform=ccrs.PlateCarree(),
                              cmap="viridis",extend='both',
                              levels=contour_levels
                              )
        
        # Set up the tickmarks
        ax.set_xticks(np.arange(-180,181,45), crs=ccrs.PlateCarree())
        ax.set_yticks(np.arange(-90,91,30)[1:-1], crs=ccrs.PlateCarree())
        lon_formatter = LongitudeFormatter(number_format='.0f',
                                           degree_symbol='')
        lat_formatter = LatitudeFormatter(number_format='.0f',
                                          degree_symbol='')
        ax.xaxis.set_major_formatter(lon_formatter)
        ax.yaxis.set_major_formatter(lat_formatter)
        
        # Turn on coastlines
        ax.coastlines()

        # Set axis font sizes
        ax.tick_params(labelsize=14)
        
        # Configure colorbar
        cbar=plt.colorbar(contour,orientation="horizontal",pad=0.1)
        cbar.ax.tick_params(labelsize=14)
        cbar.set_label('W m$^{-2}$',fontsize=16)
        cbar.mappable.set_clim(vmin=-10,vmax=10)

        # Set some titles
        plt.title(f'Lag: {lag_time} months',loc='right',fontsize=14)
        plt.title('SOI Regressed OLR',loc='left',fontsize=14)

        # Save the figure
        file_name = f'images/regression_coeffs_lag_month_{str(i).zfill(2)}.png'
        plt.savefig(file_name,dpi=100)
        plt.close()
        image_list.append(Image.open(file_name))

  file_name = f'images/lag_regression_coeffs.gif'
  image_list[0].save(file_name, save_all=True, append_images=image_list, duration=200, loop=0)
  print(file_name)
  plt.close()

#+end_src

#+RESULTS:
[[file:images/lag_regression_coeffs.gif]]
