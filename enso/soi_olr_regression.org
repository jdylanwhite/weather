#+Title: Regression of SOI Data onto OLR Data
#+Date: <2024-06-05 Wed>

* Introduction

Using the [[file:soi.org][monthly averaged time series of SOI data]], we can now use a linear regression to identify components of other meteorological variables associated with the SOI. We can do this with any matching timeseries where we regress some variable onto an index to get the correlation coefficients of the variable associated with that index.

* Import modules

Start by importing everything we'll need to run the code.

#+begin_src python :session *py* :results silent

  # Import modules
  from sklearn.linear_model import LinearRegression
  import xarray
  import datetime
  import pandas as pd
  import numpy as np
  import matplotlib.pyplot as plt
  import cartopy.crs as ccrs
  from cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter
  from mpl_toolkits.axes_grid1 import make_axes_locatable
  from cartopy.util import add_cyclic_point

#+end_src

* Read the OLR data

Here we open the [[file:~/Documents/Projects/weather/olr/olr.org][OLR data we've previously downloaded]] and explored.

#+begin_src python :session *py* :results value

  # Set date bounds to slice the data
  begin_date = datetime.datetime(1980,1,1)
  end_date = datetime.datetime(2024,1,1)

  # Read OLR dataset
  file_path = "../olr/data/olr-monthly_v02r07_197901_202404.nc"

  # Open the dataset with xarray
  ds = xarray.open_dataset(file_path)

  # Slice the data to only be within a specified date range 
  olr_slice_da = ds['olr'].sel(time=slice(begin_date,end_date))

  olr_slice_da
  
#+end_src

#+RESULTS:
#+begin_example
<xarray.DataArray 'olr' (time: 528, lat: 72, lon: 144)> Size: 22MB
[5474304 values with dtype=float32]
Coordinates:
  ,* lon      (lon) float32 576B 1.25 3.75 6.25 8.75 ... 351.2 353.8 356.2 358.8
  ,* lat      (lat) float32 288B -88.75 -86.25 -83.75 ... 83.75 86.25 88.75
  ,* time     (time) datetime64[ns] 4kB 1980-01-16T12:00:00 ... 2023-12-16T12:...
Attributes:
    long_name:      NOAA Climate Data Record of Monthly Mean Upward Longwave ...
    standard_name:  toa_outgoing_longwave_flux
    units:          W m-2
    cell_methods:   time: mean area: mean
    valid_min:      50.0
    valid_max:      500.0
#+end_example

* Read the SOI Data

Now let's read the [[file:soi.org][index timeseries we downloaded before]]. Both datasets are monthly means, but we need to make sure to subset the SOI data to match the same timeseries as the OLR data.

#+begin_src python :session *py* :results value

  # Get the SOI data between within the same date range
  soi_df = pd.read_csv("./data/soi.csv")
  soi_df['Date'] = pd.to_datetime(soi_df['Date'])
  soi_slice_df = soi_df.loc[
      (soi_df['Date']>=begin_date) & (soi_df['Date']<end_date)
  ]
  soi_slice_df.head()

#+end_src

#+RESULTS:
:      Year  Month  SOI       Date ENSO Phase
: 348  1980      1  0.4 1980-01-01    La Nina
: 349  1980      2  0.3 1980-02-01    La Nina
: 350  1980      3 -0.4 1980-03-01    El Nino
: 351  1980      4 -0.6 1980-04-01    El Nino
: 352  1980      5 -0.0 1980-05-01    La Nina

* Get the Regression Coefficients

We can use the [[https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html][linear regression from scikit-learn]] to get the regression coefficients. Here, our $x$ is the index timeseries and our $y$ is the time series in each grid cell in the latitude-longitude grid.

Our index is a 1D array, and our OLR data is a 3D array, but the =LinearRegression= object can only handle 2D arrays where one of those dimensions matches the index dimension. As a result, we need to reshape the input to be 2D, and then reshape the resulting coefficients accordingly.

#+begin_src python :session *py* :results value

  # Create linear regression object
  regr = LinearRegression()

  # Train the model using the training sets
  x = regr.fit(
      soi_slice_df['SOI'].to_numpy().reshape(-1,1),
      olr_slice_da.to_numpy().reshape(528,72*144)
  )

  # Reshape the regression coefficients
  reg_coeffs = x.coef_.reshape(72,144)

  # Write data as a data array
  reg_coeffs_da = xarray.DataArray(
      reg_coeffs, 
      coords={'lat': olr_slice_da['lat'],'lon': olr_slice_da['lon']}, 
      dims=["lat", "lon"]
  )
  reg_coeffs_da.attrs["units"] = "W m-2"

  reg_coeffs_da

#+end_src

#+RESULTS:
#+begin_example
<xarray.DataArray (lat: 72, lon: 144)> Size: 83kB
array([[ 0.46610863,  0.47059297,  0.49418554, ...,  0.48713696,
         0.495683  ,  0.49429198],
       [ 0.52469693,  0.52966415,  0.53369818, ...,  0.51111719,
         0.50479825,  0.51966442],
       [ 0.62160726,  0.63866419,  0.62406369, ...,  0.57719213,
         0.60357073,  0.60858506],
       ...,
       [-0.19473598, -0.17631266, -0.1587174 , ..., -0.19736815,
        -0.20387596, -0.20136882],
       [-0.21802859, -0.2225841 , -0.20362933, ..., -0.247975  ,
        -0.22660316, -0.22373462],
       [-0.185492  , -0.15306815, -0.23130212, ..., -0.17673541,
        -0.1613377 , -0.22083416]])
Coordinates:
  ,* lat      (lat) float32 288B -88.75 -86.25 -83.75 ... 83.75 86.25 88.75
  ,* lon      (lon) float32 576B 1.25 3.75 6.25 8.75 ... 351.2 353.8 356.2 358.8
Attributes:
    units:    W m-2
#+end_example

Since our index was a standardized index, a value of 1 in the index represents a month when the sea level pressure different between Darwin and Tahiti was one standard deviation greater than the mean. In other words, an index of 1 represents a pretty typical La Nina phase month, while an index of -1 represents a pretty typical El Nino phase month.

We can multiply our regression coefficient array by some index value in order to get the anomalous OLR that we should expect as a result of a month of that index. So if we multiply the coefficients by 1, the resulting array would be the anomalous OLR as a result of a typical La Nina month. Let's plot that result.

#+begin_src python :session *py* :results output file

  # Intialize the figure
  fig = plt.figure(figsize=(11,8.5))
  
  # Set up axes using a specified projection
  ax = plt.axes(projection=ccrs.PlateCarree(central_longitude=180))

  # Add cyclic point to data
  data, lon = add_cyclic_point(reg_coeffs_da,coord=reg_coeffs_da['lon'])

  # Make a filled contour plot
  contour = ax.contourf(lon,reg_coeffs_da['lat'],data,
                        transform=ccrs.PlateCarree(),
                        cmap="viridis",extend='both')

  # Set up the tickmarks
  ax.set_xticks(np.arange(-180,181,45), crs=ccrs.PlateCarree())
  ax.set_yticks(np.arange(-90,91,30)[1:-1], crs=ccrs.PlateCarree())
  lon_formatter = LongitudeFormatter(number_format='.0f',
                                     degree_symbol='')
  lat_formatter = LatitudeFormatter(number_format='.0f',
                                    degree_symbol='')
  ax.xaxis.set_major_formatter(lon_formatter)
  ax.yaxis.set_major_formatter(lat_formatter)

  # Turn on coastlines
  ax.coastlines()

  # Set axis font sizes
  ax.tick_params(labelsize=14)

  # Configure colorbar
  cbar=plt.colorbar(contour,orientation="horizontal",pad=0.1)
  cbar.ax.tick_params(labelsize=14)
  cbar.set_label('W m$^{-2}$',fontsize=16)

  # Save the figure
  fileName = 'images/regression_coeffs.png'
  plt.savefig(fileName,dpi=300)
  plt.close()
  print(fileName)

#+end_src

#+RESULTS:
[[file:images/regression_coeffs.png]]

These results match up well with [[https://www.weather.gov/fwd/teleconnections][known ENSO teleconnections]].
